#!/usr/bin/bash
# DECRYPTED BY TRC4@USA.COM
##################################################
###       Install VDOPanel Control Panel       ###
###       cPanel Installation                  ###
##################################################
#

ARGC=("$#")

clear
echo -e "\t\t      \033[36m___    ___   ________      _______   \033[0m"
echo -e "\t\t      \033[36m\  \  /  /  |  ____  \    / _____ \  \033[0m"
echo -e "\t\t      \033[36m \  \/  /   | |    \  |  | | \033[31m|'\ \033[0m\033[36m| | \033[0m"
echo -e "\t\t\033[31m█▀▀▀▀▀▀▀\033[0m\033[36m\    /    | |     | |  | | \033[31m|_/\033[0m \033[36m| |\033[0m\033[31m▀▀▀▀▀▀█\033[0m"
echo -e "\t\t\033[31m█\033[0m     \033[36m   \  /     | |____/  |  | |_____| | \033[0m     \033[31m█\033[0m"
echo -e "\t\t\033[31m█\033[0m     \033[36m    \/      |________/    \_______/  \033[0m     \033[31m█\033[0m"
echo -e "\t\t\033[31m█            ___                   _            █\033[0m"
echo -e "\t\t\033[31m█           | _ \ __ _  _ _   ___ | |           █\033[0m"
echo -e "\t\t\033[31m█           |  _// _\` || ' \ / -_)| |           █\033[0m"
echo -e "\t\t\033[31m▀▀▀▀▀▀▀▀▀▀▀▀|_|  \__,_||_||_|\___||_|▀▀▀▀▀▀▀▀▀▀▀▀\033[0m"
URL_VDO="https://vdopanel.com/dist"
VDO_VER=`curl -s ${URL_VDO}/ver.txt`
echo -e "\t\t                               v${VDO_VER}"

if [ $ARGC -ne 1 ]; then
	echo -e "\n\033[32mOptions :\033[0m\n\nStart install with this command : ./install.bin start\nfor uninstall : ./install.bin uninstall\n"
	exit -1
fi

export choose=$1

STATUS_POSITION="\033[60G"
CYAN="\033[36m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
TMP_F="/tmp/tmpinstall"
echo > ${TMP_F}

validation_func()
{
 if [ ${PID_STATUS} -ne 0 ]; then
	${1}
	echo -e "\nInstallation aborted, Try again or contact support for this error.\n\n ${RED} Error Details : \033[0m\n"
	cat ${TMP_F}
        exit -1
 else
        ${2}
 fi
}

SPINNER()
{
 PID=$!
 i=1
 sp="-\\|/"
 echo -n ' '
 while [ -d /proc/${PID} ]
 do
	printf "\b${sp:i++%${#sp}:1}"
 done
 wait ${PID}
 PID_STATUS=$?
}

OS_CHK=`cat /etc/os-release | grep ID= | grep -v _ID | cut -d"=" -f2 | tr -d '"'`
OS_VER_CHK=`cat /etc/os-release | grep VERSION_ID= | cut -d"=" -f2 | tr -d '"' | cut -c1-1`
if [[ ${OS_CHK} == "centos" || ${OS_CHK} == "cloudlinux" ]]; then
	if [ ${OS_VER_CHK} != 7 ]; then
		echo -e "${RED} Your CentOS version not supported, this VDOPanel installation for CentOS 7 only.\033[0m\n"
		echo -e " Your current version is : CentOS ${OS_VER_CHK}\n"
		exit -1
	fi
else
	echo -e "${RED} Your System not supported, this VDOPanel installation for CentOS 7.\033[0m\n"
	Current_SYS=`cat /etc/os-release | grep "PRETTY_NAME=" | cut -d"=" -f2`
	echo -e " Your current system is : ${Current_SYS}\n"
	exit -1
fi

cPanel_chk="/usr/local/cpanel/version"
if [ ! -f ${cPanel_chk} ]; then
	echo -e "${RED} cPanel not installed on your server, This installation for cPanel servers only.\033[0m\n"
	exit -1
fi

PHP_CHK=`/usr/local/cpanel/bin/whmapi1 php_get_installed_versions | grep ea-php`
if [[ ${PHP_CHK} == *"ea-php74"* ]]; then
	PHP_VER="/usr/local/bin/ea-php74"
	PHPver_="ea-php74"
elif [[ ${PHP_CHK} == *"ea-php73"* ]]; then
	PHP_VER="/usr/local/bin/ea-php73"
	PHPver_="ea-php73"
elif [[ ${PHP_CHK} == *"ea-php72"* ]]; then
	PHP_VER="/usr/local/bin/ea-php72"
	PHPver_="ea-php72"
else
	echo "${RED} PHP 7.4, 7.3 or 7.2 not installed on you cPanel server, Please install one of them at least with ionCube Loader.\033[0m\n"
	exit -1
fi

status_busy()
{
  echo -ne "$@  ${STATUS_POSITION}${CYAN} [ under progress ] \033[0m${NOCOL}"
}

status_done()
{
  echo -e "${STATUS_POSITION}${GREEN} [ installed done ]\033[0m \033[80G \033[0m${NOCOL}"
}

status_fail()
{
  echo -e "${STATUS_POSITION}${RED} [ fail ]          \033[0m \033[80G \033[0m${NOCOL}"
}

function Elapsed_T_FUNC()
{
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hours ' $H
  (( $M > 0 )) && printf '%d minutes ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
  printf '%d seconds\n' $S
}

Source_L="https://vdopanel.com/dist"

if [ $choose = "start" ]; then
	SERV_IP=`dig TXT +short o-o.myaddr.l.google.com @ns1.google.com -4 | tr -d '"'`
	#SERV_IP=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | head -n1
	RECOMMENDED_="\033[32m[ RECOMMENDED ]\033[0m"
	NOT_RECOMMENDED_="\033[31m[ NOT RECOMMENDED ]\033[0m"
	SERVIPC="\033[35m${SERV_IP}\033[0m"
	echo -e "\n"
	echo -e "#####################################################################################" 1>&2
	echo -e "#                                                                                   #" 1>&2
	echo -e "#      Must point your domain or subdomain to server IP before resume install       #" 1>&2
	echo -e "#      Create A record for ex : domain.com or stream.domain.com ==> ${SERVIPC}      \033[85G#" 1>&2
	echo -e "#      So, get ready to start install.  ${RECOMMENDED_}                             #" 1>&2
	echo -e "#      Or you can resume install with server IP. ${NOT_RECOMMENDED_}                #" 1>&2
	echo -e "#                                                                                   #" 1>&2
	echo -e "#####################################################################################" 1>&2
	echo -e "\n"
	echo -e "\033[31;5m !!Important!! \033[0m - ${YELLOW}Make sure NGINX not installed before on your cpanel server.\033[0m"
	echo -e "\t\t-${YELLOW} If NGINX installed abort this installation and remove it first and start installation again.\033[0m\n"

	while true
	do
		read -p "Put [ y ] to confirm installation? [y/n] : " yn
		case $yn in
		[Yy]* )

		break;;
		[Nn]* ) echo -e "Installation has been canceled.\n";exit;;
		* ) echo -e "${RED}Please answer yes or no.\033[0m";;
		esac
	done

	echo -e "\nPut your domain if you will use panel with your domain ${GREEN}[ RECOMMENDED ]\033[0m"
	echo -e "Put [${YELLOW} no-domain \033[0m] if you will use panel with server IP ${RED}[ NOT RECOMMENDED ]\033[0m\n"
	read -p "Put your choice : " DomainC

	if [[ -z ${DomainC} ]]; then
		echo -e "\n${RED}Don't leave field empty, please start install again and put valid domain.\033[0m\n"
		exit -1
	elif [[ ${DomainC} =~ \ + ]]; then
		echo -e "\n${RED}Wrong input don't add space in domain name content, please start install again and put valid domain.\033[0m\n"
		exit -1
	fi

	DomainC=`echo "${DomainC}" | tr '[:upper:]' '[:lower:]'`
	chk_domain=`dig +short ${DomainC} | head -n 1`
	if [ ${DomainC} = "no-domain" ]; then
		SSL_VDO_DOMAIN="IP"
#	elif [ ! ${chk_domain} ]; then
#		echo -e "\n${RED}Domain not valid, please start install again and put valid domain.\033[0m\n"
#		exit -1
#	elif [ ${SERV_IP} = ${chk_domain} ]; then
#		SSL_VDO_DOMAIN="domain"
	else
		SSL_VDO_DOMAIN="domain"
#	else
#		echo -e "\n${RED}Domain not point to the server IP, point your domain to server IP : ${SERV_IP} and try again.\033[0m\n"
#		exit -1
	fi

	cPaneldomain_CHK=`cat /etc/userdomains | grep ${DomainC} | cut -d":" -f1`
	if [[ ! -z ${cPaneldomain_CHK} ]]; then
		if [ ${cPaneldomain_CHK} = ${DomainC} ]; then
			echo -e "\n${RED}Your domain or subdomain already in use in cpanel, Please remove it first and try again or use other one.\033[0m\n"
			exit -1
	fi
	fi

	echo -e "\n${GREEN}Start install VDOPanel system.....\033[0m\n"
	SECONDS=0

	rm -rf /usr/local/src/*.tar.gz /usr/local/src/*.zip /usr/local/src/pcre-*
	echo -e "${CYAN}Install Main packages..\033[0m"

	##############################################################
	Install=" - Groupinstall Development Tools.."
	##############################################################
	status_busy "${Install}"
	yum -y groupinstall 'Development Tools' > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"

	##############################################################
	Install=" - Install system packages.."
	##############################################################
	status_busy "${Install}"
	yum -y install epel-release libmaxminddb libmaxminddb-devel GeoIP GeoIP-devel iptables-services iftop bc sshpass > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"

	##############################################################
	Install="\nInstall Streaming packages.."
	##############################################################
	echo -e "${CYAN} ${Install} \033[0m"
	cd /usr/local/src

	##############################################################
	Install=" - Get ngx_http_geoip2_module package.."
	##############################################################
	status_busy "${Install}"
	wget ${Source_L}/lib/ngx_http_geoip2_module.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	# https://vdopanel.com/dist/geo_db/GeoLite2-City.mmdb
	wget ${Source_L}/geo_db/GeoLite2-City.mmdb > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	# https://vdopanel.com/dist/geo_db/GeoLite2-Country.mmdb
	wget ${Source_L}/geo_db/GeoLite2-Country.mmdb > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"
	Install=" - Extract ngx_http_geoip2_module package.."
	status_busy "${Install}"
	tar -xzf ngx_http_geoip2_module.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"

	##############################################################
	Install=" - Install Nginx and RTMP service.."
	##############################################################
	status_busy "${Install}"
	if rpm -q nginx > /dev/null; then
		yum -y remove nginx > ${TMP_F} 2>&1 &
		SPINNER;status_busy
	fi
	# https://vdopanel.com/dist/lib/vdopanel_nginx-1.18.0.el7.ngx.x86_64.rpm
	yum -y install ${Source_L}/lib/vdopanel_nginx-1.18.0.el7.ngx.x86_64.rpm > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	mkdir -p /varrun >/dev/null 2>&1
	ln -s /usr/lib64/nginx/modules /etc/nginx/modules >/dev/null 2>&1

	mkdir -p /etc/nginx/conf.d
	cd /usr/local/src
	mkdir -p /etc/nginx/loadb
	mkdir -p /etc/nginx/geoip
	mv GeoLite2-City.mmdb /etc/nginx/geoip > ${TMP_F} 2>&1
	mv GeoLite2-Country.mmdb /etc/nginx/geoip > ${TMP_F} 2>&1
	# https://vdopanel.com/dist/config/nginx-cpanel.txt
	curl -s ${Source_L}/config/nginx-cpanel.txt > /etc/nginx/nginx.conf
	sed -i "s/_IP_/${SERV_IP}/g" "/etc/nginx/nginx.conf" > ${TMP_F} 2>&1
	WORKER_N=`/usr/bin/nproc`
	sed -i "s/_WORKER_NUM_/${WORKER_N}/g" "/etc/nginx/nginx.conf"
	sed -i "s/_UOWNER_/vdopanel/g" "/etc/nginx/nginx.conf"
	/bin/systemctl daemon-reload
#	/bin/systemctl start nginx
	/bin/systemctl enable nginx >/dev/null 2>&1
	/bin/systemctl enable iptables >/dev/null 2>&1
	status_done '${Install}'


	##############################################################
	Install=" - Checking FTP installation for cpanel.."
	##############################################################
	status_busy "${Install}"
	CHK_FTP=`grep ftpserver /var/cpanel/cpanel.config | cut -d"=" -f2`
	if [ ${CHK_FTP} = "disabled" ]; then
		/scripts/setupftpserver pure-ftpd --force > ${TMP_F} 2>&1 &
		SPINNER;status_busy
	fi
	status_done '${Install}'


	##############################################################
	Install=" - Install FFMPEG and Streaming packages.."
	##############################################################
	status_busy "${Install}"
	yum -y install youtube-dl > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	# https://vdopanel.com/dist/lib/yt-dlp
	curl -s ${Source_L}/lib/yt-dlp > /usr/local/bin/yt-dlp &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'"
	chmod +x /usr/local/bin/yt-dlp > ${TMP_F} 2>&1
	/usr/local/bin/yt-dlp -U > ${TMP_F} 2>&1 &
	SPINNER;status_busy

	yum -y localinstall --nogpgcheck https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	yum -y install yasm frei0r-devel frei0r-plugins gnutls-devel libass-devel lame-devel x264-devel > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"

	if ! rpm -q ffmpeg > /dev/null; then
	# https://vdopanel.com/dist/lib/vdopanel_ffmpeg-4.2.4-0.x86_64.rpm
		yum -y install ${Source_L}/lib/vdopanel_ffmpeg-4.2.4-0.x86_64.rpm > ${TMP_F} 2>&1 &
		SPINNER;status_busy
		validation_func "status_fail '${Install}'"
	fi
	sleep 1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"


	##############################################################
	Install=" - Install Stunnel.."
	##############################################################
	status_busy "${Install}"
	yum -y install stunnel psmisc > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	mkdir -p /var/run/stunnel > ${TMP_F} 2>&1
	chmod 777 /var/run/stunnel > ${TMP_F} 2>&1
	echo > /var/log/stunnel.log > ${TMP_F} 2>&1
	chmod 777 /var/log/stunnel.log > ${TMP_F} 2>&1
	# https://vdopanel.com/dist/config/stunnel.service.txt
	curl -s ${Source_L}/config/stunnel.service.txt > /lib/systemd/system/stunnel.service &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	# https://vdopanel.com/dist/config/stunnel.conf.txt
	curl -s ${Source_L}/config/stunnel.conf.txt > /etc/stunnel/stunnel.conf &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	/bin/systemctl enable stunnel.service > ${TMP_F} 2>&1
	/bin/systemctl daemon-reload > ${TMP_F} 2>&1
	/bin/systemctl start stunnel > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"


	##############################################################
	Install=" - Install goaccess.."
	##############################################################
	status_busy "${Install}"
	cd /usr/local/src
	yum -y install openssl-devel ncurses-devel > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	# https://vdopanel.com/dist/lib/goaccess-1.5.2.tar.gz
	wget ${Source_L}/lib/goaccess-1.5.2.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	tar -xzf goaccess-1.5.2.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	cd goaccess-1.5.2
	./configure --enable-debug --enable-utf8 --enable-geoip=mmdb --enable-tcb=memhash --with-getline --with-openssl > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'"
	make > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	make install > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	# https://vdopanel.com/dist/config/goaccess1.5.conf.txt
	curl -s ${Source_L}/config/goaccess1.5.conf.txt > /usr/local/etc/goaccess/goaccess.conf &
	SPINNER;status_busy
	validation_func "status_fail '${Install}'" "status_done '${Install}'"


	##############################################################
	Install="\nInstall and Configure VDOpanel UI.."
	##############################################################
	echo -e "${CYAN} ${Install} \033[0m"
	cd /usr/local/src
	VDO_SYS_USER="vdopanel"

	STEP_=" - Create VDOPanel account.."
	status_busy "${STEP_}"
	cpanel_account_CHK=`egrep ${VDO_SYS_USER} /etc/domainusers | cut -d":" -f1`
	if [ ${cpanel_account_CHK} ]; then
		if [ ${cpanel_account_CHK} = ${VDO_SYS_USER} ]; then
			/usr/local/cpanel/bin/whmapi1 removeacct user=${VDO_SYS_USER} > ${TMP_F} 2>&1
			SPINNER;status_busy
		fi
	fi
	CP_EXIT_func()
	{
		CR_CHK=`cat ${TMP_F} | grep result | awk {'print $2'}`
		if [ ${CR_CHK} = 0 ]; then
			echo -e "\nInstallation aborted, Try again or contact support for this error.\n\n ${RED} Error Details : \033[0m\n"
			cat ${TMP_F}
			exit -1
		fi
	}
	if [ ${SSL_VDO_DOMAIN} = "domain" ]; then
		URL_S_CONF=${DomainC}
		/usr/local/cpanel/bin/whmapi1 createacct username=${VDO_SYS_USER} domain=${DomainC} maxpark=unlimited > ${TMP_F} 2>&1 &
		SPINNER;status_busy
		CP_EXIT_func
	elif [ ${SSL_VDO_DOMAIN} = "IP" ]; then
		DomainC=${SERV_IP}
		CONV_IP=`echo ${SERV_IP//./-}`
		create_by_IP="vdopanel-${CONV_IP}.com"
		URL_S_CONF=${create_by_IP}
		/usr/local/cpanel/bin/whmapi1 createacct username=${VDO_SYS_USER} domain=${create_by_IP} maxpark=unlimited > ${TMP_F} 2>&1 &
		SPINNER;status_busy
		CP_EXIT_func
	fi
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	chown -R ${VDO_SYS_USER}.${VDO_SYS_USER} /var/cache/nginx/ >/dev/null 2>&1
	chown -R ${VDO_SYS_USER}.${VDO_SYS_USER} /var/cache/nginxfastcgi_temp/* >/dev/null 2>&1

	STEP_=" - Get vdopanel files.."
	status_busy "${STEP_}"
	# https://vdopanel.com/dist/vdopanel.tar.gz
	wget ${Source_L}/vdopanel.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	STEP_=" - Extract vdopanel files.."
	status_busy "${STEP_}"
	tar -xzf vdopanel.tar.gz > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	STEP_=" - Copy vdopanel files.."
	status_busy "${STEP_}"
	mv vdopanel/core/vdopanel /usr/local/bin/
	chmod +x /usr/local/bin/vdopanel
	scp -r vdopanel/core /home/${VDO_SYS_USER} &
	SPINNER;status_busy
	scp -rp vdopanel/public_html/.[!.]* /home/${VDO_SYS_USER}/public_html &
	SPINNER;status_busy
	scp -r vdopanel/public_html/* /home/${VDO_SYS_USER}/public_html &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	mkdir -p /home/${VDO_SYS_USER}/users
	chown -R ${VDO_SYS_USER}.${VDO_SYS_USER} /home/${VDO_SYS_USER}/public_html/* > ${TMP_F} 2>&1
	chown -R ${VDO_SYS_USER}.${VDO_SYS_USER} /home/${VDO_SYS_USER}/users > ${TMP_F} 2>&1
	chown -R ${VDO_SYS_USER}.${VDO_SYS_USER} /home/${VDO_SYS_USER}/public_html/.[!.]* > ${TMP_F} 2>&1
	for i in `ls /home/${VDO_SYS_USER}/core/*`
	do
		if [ -f ${i} ]; then
			chmod +x ${i} > ${TMP_F} 2>&1
		fi
	done
	chmod 777 -R /home/${VDO_SYS_USER}/core/tmp > ${TMP_F} 2>&1

	DB_NAME="${VDO_SYS_USER}_db"
	DB_USER="${VDO_SYS_USER}_user1"
	RAND_PASS_DB=`head /dev/urandom | tr -dc A-Za-z0-9 | head -c 15 ; echo '@Rx-37'`

	STEP_=" - Create ${VDO_SYS_USER} database.."
	status_busy "${STEP_}"
	/usr/local/cpanel/bin/cpapi2 --user=${VDO_SYS_USER} MysqlFE createdb db=${DB_NAME} > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	/usr/local/cpanel/bin/cpapi2 --user=${VDO_SYS_USER} MysqlFE createdbuser dbuser=${DB_USER} password=${RAND_PASS_DB} > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	/usr/local/cpanel/bin/cpapi2 --user=${VDO_SYS_USER} MysqlFE setdbuserprivileges privileges=ALL db=${DB_NAME} dbuser=${DB_USER} > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	STEP_=" - Restore ${VDO_SYS_USER} database.."
	status_busy "${STEP_}"
	mysql ${DB_NAME} < vdopanel/database/vdopanel_db.sql > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	sed -i "s/_SITE_URL_/${URL_S_CONF}/g" "/home/${VDO_SYS_USER}/public_html/.env"
	sed -i "s/_PASSWORD_/${RAND_PASS_DB}/g" "/home/${VDO_SYS_USER}/public_html/.env"
	sudoers_chk=`cat /etc/sudoers | grep ${VDO_SYS_USER}`
	if [[ ! ${sudoers_chk} ]]; then
		STEP_=" - Set sudoers ${VDO_SYS_USER} files.."
		status_busy "${STEP_}"
		cat /home/${VDO_SYS_USER}/core/conf-templates/sudoers.conf >> /etc/sudoers
		sed -i "s/_S_OWNER_/${VDO_SYS_USER}/g" "/etc/sudoers"
		sed -i "s/_S_USER_/${VDO_SYS_USER}/g" "/etc/sudoers" &
		SPINNER;status_busy
		validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"
		rm -rf /home/${VDO_SYS_USER}/core/conf-templates/sudoers.conf > ${TMP_F} 2>&1
	fi

	STEP_=" - Set local vhost for API stream locking.."
	status_busy "${STEP_}"
	cat /home/${VDO_SYS_USER}/core/conf-templates/vdopanel_cpanel_ip.conf > /etc/apache2/conf.modules.d/vdopanel_cpanel_ip.conf
	service httpd restart > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	/bin/systemctl restart nginx > ${TMP_F} 2>&1 &
	SPINNER;status_busy
	status_done '${Install}'

	##############################################################
	###### Set CronJob..
	##############################################################
	CronCHK=`cat /etc/crontab | grep "core/utils"`
	if [[ ! ${CronCHK} ]]; then
		STEP_=" - Set CronJob and PHP settings.."
		status_busy "${STEP_}"
		/usr/local/cpanel/bin/whmapi1 php_ini_set_directives \
		directive-1=allow_url_fopen:1 \
		directive-2=max_execution_time:180 \
		directive-3=max_input_time:180 \
		directive-4=memory_limit:512M \
		directive-5=post_max_size:2000M \
		directive-6=upload_max_filesize:2000M \
		version=${PHPver_} > ${TMP_F} 2>&1 &
		SPINNER;status_busy
		/usr/local/cpanel/bin/whmapi1 php_set_vhost_versions version=${PHPver_} php_fpm=0 vhost-0=${URL_S_CONF} > ${TMP_F} 2>&1 &
		SPINNER;status_busy

#		PHP_CHK=`php -v | head -1 | awk {'print $2'} | cut -c1-3`
		echo "* * * * * root for i in {1..6}; do ${PHP_VER} /home/vdopanel/public_html/artisan schedule:run > /dev/null 2>&1 & sleep 10 > /dev/null 2>&1;done" >> /etc/crontab
		echo "*/10 * * * * root /home/vdopanel/core/utils clearlogs > /dev/null 2>&1" >> /etc/crontab
		echo "0 1 1 * * root /home/vdopanel/core/utils bandwidthreset all > /dev/null 2>&1" >> /etc/crontab
		echo "* * * * * root /home/vdopanel/core/utils vdocron > /dev/null 2>&1" >> /etc/crontab
		echo "0 1 * * * root /home/vdopanel/core/utils sslcheck > /dev/null 2>&1" >> /etc/crontab
		echo "0 2 * * * root /home/vdopanel/core/utils dobackup scheduling > /dev/null 2>&1" >> /etc/crontab &
		SPINNER;status_busy
		validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"
	fi


	STEP_=" - Set admin info.."
	status_busy "${STEP_}"
	RAND_P1=`date +%s | sha256sum | base64 | head -c 12`
	RAND_P2=`htpasswd -nbBC 10 USER ${RAND_P1} | cut -d":" -f2`
	adminuser=`mysql ${DB_NAME} -e "SELECT name FROM users WHERE id='1'\G" | awk '{print $2}' | tr -d "1.\n"`
	mysql ${DB_NAME} -e "UPDATE users SET password = '${RAND_P2}' WHERE id='1'"
	mysql ${DB_NAME} -e "UPDATE users SET domain = '${DomainC}' WHERE id='1'"
	mysql ${DB_NAME} -e "UPDATE brandings SET domain = '${DomainC}' WHERE id='1'" &
	SPINNER;status_busy
	validation_func "status_fail '${STEP_}'" "status_done '${STEP_}'"

	Trial_L="VDOPanel-Trial-de6g65b641h89e03w"
	mysql ${DB_NAME} -e "UPDATE users SET licence = '${Trial_L}' WHERE id='1'"

	echo -e "\n${GREEN}Installation done.\033[0m"
	Elapsed_T=`Elapsed_T_FUNC ${SECONDS}`
	echo -e "Elapsed time in installation : ${Elapsed_T}\n"
	echo -e "#################################################################" 1>&2
	echo -e "#                                                               #" 1>&2
	echo -e "#      Congratulations!                                         #" 1>&2
	echo -e "#      You successfully installed VDOpanel system               #" 1>&2
	echo -e "#      URL : http://${DomainC}/portal                           \033[65G#" 1>&2
	echo -e "#      SSL URL : https://${DomainC}/portal                      \033[65G#" 1>&2
	echo -e "#      Now, you can log on your panel with the admin info       #" 1>&2
	echo -e "#      Username : ${adminuser}                                  \033[65G#" 1>&2
	echo -e "#      Password : ${RAND_P1}                                    \033[65G#" 1>&2
	echo -e "#                                                               #" 1>&2
	echo -e "#################################################################" 1>&2
	echo -e "\n"

elif [ $choose = "uninstall" ]; then
	VDO_SYS_USER="vdopanel"
	status_done()
	{
	  echo -e "${STATUS_POSITION}${GREEN} [ uninstall done ]\033[0m${NOCOL}"
	}

	echo -e "\n${RED}Are you sure you want uninstall VDO Panel software ?\033[0m \
		\nIf you confirm that will be lost all data in VDO Panel software\n"
	while true
	do
		read -p "Put [ y ] to confirm uninstall ? [y/n] : " yn
		case $yn in
		[Yy]* )
		break;;
		[Nn]* ) echo -e "Uninstallation has been canceled.\n";exit;;
		* ) echo -e "${RED}Please answer yes or no.\033[0m";;
		esac
	done
	echo -e "\n${GREEN}Start uninstall VDO Panel software.....\033[0m\n"

	STEP_=" - Delete VDO Panel system.."
	status_busy "${STEP_}"
	/usr/local/cpanel/bin/whmapi1 removeacct user=${VDO_SYS_USER} > ${TMP_F} 2>&1
	status_done "${STEP_}"


	STEP_=" - Delete VDO Panel conf files.."
	status_busy "${STEP_}"
	rm -rf /etc/nginx/conf.d/*
	sed -i '/vdopanel\/core/d' /etc/crontab > ${TMP_F} 2>&1
	sed -i '/artisan/d' /etc/crontab > ${TMP_F} 2>&1
	sed -i '/vdopanel\/core/d' /etc/sudoers > ${TMP_F} 2>&1
	sed -i '/bin\/ffmpeg/d' /etc/sudoers > ${TMP_F} 2>&1
	sed -i '/bin\/ffprobe/d' /etc/sudoers > ${TMP_F} 2>&1
	rm -rf /usr/local/bin/vdopanel /etc/stunnel/stunnel.conf
	rm -rf /etc/apache2/conf.modules.d/vdopanel_cpanel_ip.conf
	G_COLOR1="--color"
	G_COLOR2="=auto"
	G_COLOR_="${G_COLOR1}${G_COLOR2}"
	for i in `ps -aux | grep "\/home\/vdopanel\/core\/ffmpegrun" | grep -v "grep ${G_COLOR_}" | grep -v "status_done" |  awk '{print $2}'`
	do
		kill -9 ${i} > ${TMP_F} 2>&1
	done
	for i in `ps -aux | grep "\/home\/vdopanel\/core\/utils" | grep -v "grep ${G_COLOR_}" | grep -v "status_done" |  awk '{print $2}'`
	do
		kill -9 ${i} > ${TMP_F} 2>&1
	done
	status_done "${STEP_}"
	service nginx restart > /dev/null 2>&1
	echo -e "\n${GREEN}Uninstall done.\033[0m\n"

else
	echo -e "\nUnknown input."
	echo -e "\n${GREEN}Options :\033[0m\n\nStart install with this command : ./install.bin start\nfor uninstall : ./install.bin uninstall\n"
fi
